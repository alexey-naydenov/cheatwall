#!/usr/bin/env bash

image_size="1024x768"
column_separator="^-$"
column_weights="1"
# must be smaller then # of fake weights
max_column_count=20
# smplify script, weights for columns with unspecified weights
fake_weights="1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"

function usage {
    echo "Usage: cheatwall [OPTIONS] -- [IMAGEMAGIK_OPTIONS]"
}

function main {
    while getopts ":hc:s:w:o:i:" opt ; do
	case $opt in
 	    s) image_size=$OPTARG;;
	    w) column_weights=$OPTARG;;
 	    i) input_file=$OPTARG;;
 	    o) output_file=$OPTARG;;
 	    h)
		usage
		exit 0;;
 	    \?)
		echo "invalid option: -$OPTARG" >&2
		exit 1;;
	    :)
		echo "option -$OPTARG requires an argument" >&2
		exit 1;;
	esac
    done
    shift $((OPTIND-1))
    
    verify_arguments

    image_width=$(echo $image_size | sed s/x.*//)
    image_height=$(echo $image_size | sed s/.*x//)

    column_count=$(grep $column_separator $input_file | wc -l)
    column_count=$(expr $column_count + 1)

    if (( $column_count > $max_column_count )); then
	fail_with_message "too many columns: $column_count"
    fi

    column_weights=$(echo $column_weights | sed "s/,/ /g")
    column_weights=$column_weights" "$fake_weights
    column_weights=($column_weights) # can not merge with operation above
    total_weight=0
    for i in $(seq 0 $(expr $column_count - 1) ); do
	total_weight=$(expr $total_weight + ${column_weights[$i]})
    done

    tmpdir=$(mktemp -d)

    csplit -z -s -f "${tmpdir}/column" $input_file "/${column_separator}/" "{*}"
    column_files=($(find $tmpdir -type f | sort))

    image_extension=${output_file##*.}
    for i in $(seq 0 $(expr $column_count - 1) ); do
	column_width=$(expr ${column_weights[$i]} \* $image_width / $total_weight )
    	sed "/${column_separator}/d" ${column_files[$i]} \
    	    | convert -size ${column_width}x${image_height} \
    		      "$@" pango:@- "${column_files[$i]}.${image_extension}"

    done
    convert $(find $tmpdir -type f -iname "*.$image_extension" | sort) +append $output_file

    # debug
    # set -o posix; set
}

function fail_with_message {
    echo "$1" >&2
    echo
    usage
    exit 1
}

function verify_arguments {
    if [[ ! $image_size =~ ^[0-9]+x[0-9]+$ ]]; then
	fail_with_message "invalid image size format: $image_size"
    fi
    if [[ ! $column_weights =~ ^[0-9,]+$ ]]; then
	fail_with_message "invalid column weights format: $column_weights"
    fi
    if [[ ! $input_file ]]; then
	fail_with_message "input file is not specified"
    fi
    if [[ ! -f $input_file ]]; then
	fail_with_message "input file does not exist: $input_file"
    fi
    if [[ ! $output_file ]]; then
	fail_with_message "output file is not specified"
    fi
}



main "$@"
